color = "black") +
scale_fill_manual(values = c("SVM" = "blue",
"elastic.net" = "red",
"lightGBM" = "green")) +
labs(title = "Bar Plot with Error Bars (±SD)",
x = "Group",
y = "Mean Value") +
theme_minimal() +
# theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(rank.p)
# for (region.i in c('top')){
# for (model.type in c('elastic.net', 'SVM', 'lightGBM')){
# model.list = c('elastic.net',  'lightGBM')
model.list = c(  'lightGBM','SVM', 'elastic.net')
# model.list = c('SVM')
# model.list = c(  'elastic.net')
# for (model.type in model.list){
all.ranks.list = lapply(model.list, function(model.type){
print(region.i)
print(model.type)
if (model.type == 'elastic.net'){
var.col = 'name'
coeff.col = 'coefficient'
} else if (model.type == 'SVM') {
var.col = 'Variable'
coeff.col = ''
} else if (model.type == 'lightGBM') {
var.col = 'Feature'
coeff.col = 'Gain'
}
all.lgbm.iter.coeffs = mclapply(list.files(paste0('figures/model.iter.', region.i, '.rmse.12/', model.type, '/both/'),
pattern = 'model.coeff', full.names = T),
function(coeff.i){
mclapply(list.files(coeff.i, full.names = T),
function(iter.i){
iter.csv = read_csv(iter.i)
iter.csv %>% mutate(model.n = basename(coeff.i), iter.n = basename(iter.i))
}) %>% data.table::rbindlist()
})
all.lgbm.iter.coeffs
# all.lgbm.iter.coeffs[[1]] %>% filter(iter.n == 'iter.1.csv')
all.lgbm.iter.coeffs = all.lgbm.iter.coeffs %>% data.table::rbindlist()
all.lgbm.iter.coeffs = all.lgbm.iter.coeffs %>% group_by(model.n, iter.n) %>%
arrange(desc(!!sym(coeff.col)), .by_group = TRUE) %>% # Sort descending within group
mutate(sequential_rank = row_number()) %>% ungroup()
# all.lgbm.iter.coeffs %>% filter(Feature == 'GFAP') %>% view
# all.lgbm.iter.coeffs %>% filter(Feature == 'CCL11') %>% view
all.lgbm.iter.coeffs
# browser()
lgbm.coeff.rank = all.lgbm.iter.coeffs %>% ungroup() %>% group_by( model.n, !!sym(var.col)) %>%
summarise(rank = mean(sequential_rank), sd.rank = sd(sequential_rank), freq = n())
# all.lgbm.iter.coeffs %>% filter(Feature == 'AGER')
lgbm.coeff.rank
interested.feature = lgbm.coeff.rank %>% arrange(rank) %>% pull(!!sym(var.col)) %>% unique() %>% .[1:50]
p = lgbm.coeff.rank %>%
filter(!!sym(var.col) %in% interested.feature) %>%
arrange(rank) %>%
mutate(!!sym(var.col) := fct_inorder(!!sym(var.col))) %>%
# .[1:50, ] %>%
ggplot(., aes(!!sym(var.col), rank, fill = model.n)) +
# geom_col(width = 0.7, alpha = 0.8) +  # Bar plot
geom_col(position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = rank - sd.rank, ymax = rank + sd.rank),
position = position_dodge(0.9),  # Must match geom_col position!
width = 0.2,            # Width of error bar ends
size = 0.8,             # Thickness of error bars
color = "black") +
labs(title = paste0(model.type, ', ', region.i),
x = "Target",
y = "Mean Rank") +
coord_cartesian(ylim = c(0, 200)) +
theme_minimal() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
pdf(paste0('figures/coeff/', model.type, '.', region.i, '.pdf'), w = 15)
print(p)
dev.off()
lgbm.coeff.rank = lgbm.coeff.rank %>% mutate(model.type = model.type)
colnames(lgbm.coeff.rank)[2] = 'name'
lgbm.coeff.rank
})
all.ranks = all.ranks.list %>% data.table::rbindlist()
# all.ranks %>% filter(model.type == 'elastic.net', name == 'AGER') %>%
#   group_by(model.type, name) %>%
#   summarise(sd.rank = sd(rank), rank = mean(rank),  freq = sum(freq))
all.ranks = all.ranks %>% ungroup() %>% group_by(model.type, name) %>%
summarise(sd.rank = sd(rank), rank = mean(rank),  freq = sum(freq))
all.ranks
rank.p = all.ranks %>%
mutate(model.type = factor(model.type, levels = model.list)) %>%
group_by(model.type) %>% arrange(rank) %>%
mutate(name = fct_inorder(name)) %>%
# .[1:50, ] %>%
slice_head(n = 30) %>% # Will return all rows if group has <50 rows
ggplot(., aes(name, rank, fill = model.type)) +
geom_col(position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = rank - sd.rank, ymax = rank + sd.rank),
position = position_dodge(0.9),  # Must match geom_col position!
width = 0.2,                    # Width of error bar ends
size = 0.8,                     # Thickness of error bars
color = "black") +
scale_fill_manual(values = c("SVM" = "blue",
"elastic.net" = "red",
"lightGBM" = "green")) +
labs(title = "Bar Plot with Error Bars (±SD)",
x = "Group",
y = "Mean Value") +
theme_minimal() +
# theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(rank.p)
model.type
model.list
source("~/Desktop/aging prediction/aging prediction scaled/scripts/02.05.plot.coeff.R")
rank.p = all.ranks %>%
mutate(model.type = factor(model.type)) %>%
mutate(model.type = relevel(model.i, ref = model.i)) %>%
group_by(model.type) %>% arrange(rank) %>%
mutate(name = fct_inorder(name)) %>%
# .[1:50, ] %>%
slice_head(n = 30) %>% # Will return all rows if group has <50 rows
ggplot(., aes(name, rank, fill = model.type)) +
geom_col(position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = rank - sd.rank, ymax = rank + sd.rank),
position = position_dodge(0.9),  # Must match geom_col position!
width = 0.2,                    # Width of error bar ends
size = 0.8,                     # Thickness of error bars
color = "black") +
scale_fill_manual(values = c("SVM" = "blue",
"elastic.net" = "red",
"lightGBM" = "green")) +
labs(title = "Bar Plot with Error Bars (±SD)",
x = "Group",
y = "Mean Value") +
theme_minimal() +
# theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(rank.p)
rank.p = all.ranks %>%
mutate(model.type = factor(model.type))
rank.p = all.ranks %>%
mutate(model.type = factor(model.type)) %>%
mutate(model.type = relevel(model.type, ref = model.i)) %>%
group_by(model.type) %>% arrange(rank) %>%
mutate(name = fct_inorder(name)) %>%
# .[1:50, ] %>%
slice_head(n = 30) %>% # Will return all rows if group has <50 rows
ggplot(., aes(name, rank, fill = model.type)) +
geom_col(position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(aes(ymin = rank - sd.rank, ymax = rank + sd.rank),
position = position_dodge(0.9),  # Must match geom_col position!
width = 0.2,                    # Width of error bar ends
size = 0.8,                     # Thickness of error bars
color = "black") +
scale_fill_manual(values = c("SVM" = "blue",
"elastic.net" = "red",
"lightGBM" = "green")) +
labs(title = "Bar Plot with Error Bars (±SD)",
x = "Group",
y = "Mean Value") +
theme_minimal() +
# theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(rank.p)
source("~/Desktop/aging prediction/aging prediction scaled/scripts/02.05.plot.coeff.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/02.05.plot.coeff.R")
dein.info <- openxlsx::read.xlsx("~/Downloads/OneDrive_1_8-25-2025/20250620-1127_Bay1_CNS Disease Panel 120 _RBD_Donor Information for Alamar.xlsx", sheet = 2)
dein.info
dein.info = dein.info %>% select(Deidentified, Age) %>% distinct() %>% filter(!str_detect(Deidentified, 'SC'))
dein.info %>% head()
list.files('figures/prediction/lilly/bridged/include.capped/', full.names = T)
all.res = lapply(list.files('figures/prediction/lilly/bridged/include.capped/', full.names = T), function(model.i){
# all.res = lapply(list.files('figures/prediction/lilly/not.bridged//include.capped/', full.names = T), function(model.i){
# all.res = lapply(list.files('figures/prediction/lilly/bridged/remove.capped//', full.names = T), function(model.i){
print(model.i %>% basename())
model1.res = read.csv(model.i)
model1.res %>% head()
comb.res = dein.info %>% inner_join(model1.res, by = c('Deidentified' = 'X'))
comb.res %>% head()
RMSE(comb.res$pred.age, comb.res$Age)
# comb.res %>%
#   ggplot(aes(Age, pred.age)) +
#     geom_smooth(method = 'lm') +
#     geom_abline(slope = 1, intercept = 0) +
#   geom_point()
})
all.res
all.res %>% unlist() %>% mean()
source("~/Desktop/aging prediction/aging prediction scaled/scripts/02.05.plot.coeff.R")
source("~/.active-rstudio-document")
full.data.wide
lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
lm(full.data[, 'Age2'], full.data.wide[, prot.i])
})
lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
})
full.data.wide %>% select(-c(SampleName, Sex, Age2))
full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames()
full.data.wide[, 'Age2']
lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
})
lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
browser()
lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
})
prot.i
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm(as.formula(paste0('Age2'))
lm(Age2 ~ ACHE, data = full.data.wide)
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
# lm(as.formula(paste0('Age2'))
lm(Age2 ~ ACHE, data = full.data.wide)
lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm(as.formula(paste0('Age2 ~ ', prot.i), data = full.data.wide)
# lm(Age2 ~ ACHE, data = full.data.wide)
})
lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
# lm(Age2 ~ ACHE, data = full.data.wide)
})
colnames(full.data.wide)
colnames(full.data.wide) <- gsub("[^[:alnum:]]", "", colnames(full.data.wide))
lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
# lm(Age2 ~ ACHE, data = full.data.wide)
})
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
lm.res
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
lm.res
summary(lm.res)
summary(lm.res)$coefficients
summary(lm.res)$coefficients[2,]
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,]
# lm(Age2 ~ ACHE, data = full.data.wide)
})
all.lm.res
all.lm.res %>% data.table::rbindlist()
summary(lm.res)$coefficients[2,]
summary(lm.res)$coefficients[2,] %>% data.frame()
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t()
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t()
# lm(Age2 ~ ACHE, data = full.data.wide)
})
all.lm.res %>% data.table::rbindlist()
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame()
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame()
# lm(Age2 ~ ACHE, data = full.data.wide)
})
all.lm.res %>% data.table::rbindlist()
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame() %>%
mutate(protein = prot.i)
# lm(Age2 ~ ACHE, data = full.data.wide)
})
all.lm.res %>% data.table::rbindlist()
all.lm.res = all.lm.res %>% data.table::rbindlist()
all.lm.res %>% mutate(adj.pval = p.adjust(Pr...t..))
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame() %>%
mutate(protein = prot.i)
# lm(Age2 ~ ACHE, data = full.data.wide)
})
all.lm.res = all.lm.res %>% data.table::rbindlist()
all.lm.res = all.lm.res %>% mutate(adj.pval = p.adjust(Pr...t..))
all.lm.res
all.lm.res %>% arrange(adj.pval)
all.lm.res %>% arrange(adj.pval) %>% view
full.data.wide %>%
ggplot() %>%
geom_point(aes(Age2, !!sym(prot.i)))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i)))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm')
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2 !!sym(prot.i)))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame() %>%
mutate(protein = prot.i)
# lm(Age2 ~ ACHE, data = full.data.wide)
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
})
all.lm.res = all.lm.res %>% data.table::rbindlist()
all.lm.res = all.lm.res %>% mutate(adj.pval = p.adjust(Pr...t..))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
scale_y_log10() +
scale_x_log10() +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
full.data.wide %>% select(-c(SampleName, Sex))
full.data.wide %>% select(-c(SampleName, Sex)) %>% scale()
plot.full.wide = full.data.wide %>% select(-c(SampleName, Sex)) %>% scale()
plot.full.data.wide = full.data.wide %>% select(-c(SampleName, Sex)) %>% scale()
plot.full.data.wide = full.data.wide %>% select(-c(SampleName, Sex)) %>% scale()
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame() %>%
mutate(protein = prot.i)
plot.full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
plot.full.data.wide %>%
plot.full.data.wide
plot.full.data.wide
plot.full.data.wide %>% data.frame()
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame() %>%
mutate(protein = prot.i)
# lm(Age2 ~ ACHE, data = full.data.wide)
# plot.full.data.wide %>% data.frame()
plot.full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
})
all.lm.res = lapply(full.data.wide %>% select(-c(SampleName, Sex, Age2)) %>% colnames(), function(prot.i){
# browser()
# lm(full.data.wide[, 'Age2'], full.data.wide[, prot.i])
lm.res = lm(as.formula(paste0('Age2 ~ ', prot.i)), data = full.data.wide)
summary(lm.res)$coefficients[2,] %>% data.frame() %>% t() %>% data.frame() %>%
mutate(protein = prot.i)
# lm(Age2 ~ ACHE, data = full.data.wide)
# # plot.full.data.wide %>% data.frame()
# plot.full.data.wide %>%
#   ggplot() +
#     geom_point(aes(Age2, !!sym(prot.i))) +
#     geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
})
all.lm.res = all.lm.res %>% data.table::rbindlist()
all.lm.res = all.lm.res %>% mutate(adj.pval = p.adjust(Pr...t..))
all.lm.res %>% filter(protein == 'ACHE')
prot.i = 'CCL11'
# plot.full.data.wide %>% data.frame()
plot.full.data.wide %>%
ggplot() +
geom_point(aes(Age2, !!sym(prot.i))) +
geom_smooth(method = 'lm', aes(Age2, !!sym(prot.i)))
all.lm.res %>% arrange(adj.pval)
all.lm.res %>% arrange(adj.pval) %>%
write.csv(., 'figures/lm.res/lm.feature.importance.csv')
dir.create('figures/lm.res/')
all.lm.res %>% arrange(adj.pval) %>%
write.csv(., 'figures/lm.res/lm.feature.importance.csv')
lm(Age2 ~ ACHE + CCL11, data = full.data.wide)
svm1 = read_csv(paste0('figures/lm.res/lm.feature.importance.csv'))
svm1
debugSource("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
debugSource("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
debugSource("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
svm1 = read_csv(paste0('figures/lm.res/lm.feature.importance.csv'))
svm1
train.comb.reformat
svm1
svm1$protein[1:20]
lm(as.formula(paste0('Age2 ~ ', paste(svm1$protein[1:20], sep = '+')), data = full.data.wide, train.comb.reformat)
glm.manual = glmnet(
lm(as.formula(paste0('Age2 ~ ', paste(svm1$protein[1:20], sep = '+'))), data = full.data.wide, train.comb.reformat)
as.formula(paste0('Age2 ~ ', paste(svm1$protein[1:20], sep = '+'))
)
lm(as.formula(paste0('Age2 ~ ', paste(svm1$protein[1:20], collapse = '+'))), data = full.data.wide, train.comb.reformat)
lm(as.formula(paste0('Age2 ~ ', paste(svm1$protein[1:20], collapse = '+'))), data = train.comb.reformat)
lm(as.formula(paste0('Age2 ~ ', paste(svm1$protein[1:20], collapse = '+'))), data = train.comb.reformat %>% data.frame())
lm(as.formula(paste0('age ~ ', paste(svm1$protein[1:20], collapse = '+'))), data = train.comb.reformat %>% data.frame())
lm(as.formula(paste0('age ~ ', paste(svm1$protein[1:20], collapse = '+'))), data = train.comb.reformat)
lm(as.formula(paste0('age ~ ', paste(svm1$protein[1:20], collapse = '+'))), data = train.comb.reformat %>% data.frame())
lm.res = lm(as.formula(paste0('age ~ ', paste(svm1$protein[1:20], collapse = '+'))), data = train.comb.reformat %>% data.frame())
predict(lm.res,           otherdata.wide)
predict(lm.res,           otherdata.wide %>% data.frame())
model.training <- lm(Age ~ pred.age,
data = data.frame(pred.age = predict(lm.res, train.comb.reformat[, !colnames(train.comb.reformat) %in% "age"])[,1],
Age = train.comb.reformat[, 'age']))
model.training <- lm(Age ~ pred.age,
data = data.frame(pred.age = predict(lm.res, train.comb.reformat[, !colnames(train.comb.reformat) %in% "age"] %>% data.frame())[,1],
Age = train.comb.reformat[, 'age']))
model.training <- lm(Age ~ pred.age,
data = data.frame(pred.age = predict(lm.res, train.comb.reformat[, !colnames(train.comb.reformat) %in% "age"] %>% data.frame()),
Age = train.comb.reformat[, 'age']))
model.training
pred.res <- predict(lm.res, otherdata.wide %>% data.frame())
pred.res
# pred_svm_untuned = pred_svm_untuned - 5
# pred.res = pred.res[,1]
new.pred = coefficients(model.training)['pred.age'] * pred.res + coefficients(model.training)[1]
new.pred
source("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
svm1
svm1 %>% filter(adj.pval < 0.05)
svm1 %>% filter(adj.pval < 0.01)
source("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/03.03.basel.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
model.training <- lm(Age ~ pred.age,
data = data.frame(pred.age = predict(lm.res, train.comb.reformat[, !colnames(train.comb.reformat) %in% "age"] %>% data.frame()),
Age = train.comb.reformat[, 'age']))
model.training
pred.res <- predict(lm.res, otherdata.wide %>% data.frame())
pred.res
# pred_svm_untuned = pred_svm_untuned - 5
# pred.res = pred.res[,1]
new.pred = coefficients(model.training)['pred.age'] * pred.res + coefficients(model.training)[1]
new.pred
pred.res
model.training
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
print(p)
lmu.pred.folder = paste0('figures/prediction/lmu.whole.training/', matrix.type, '/')
(paste0(lmu.pred.folder, 'rmse.',  model.type, '.', test.fold.i, '.pdf')
pdf(paste0(lmu.pred.folder, 'rmse.',  model.type, '.', test.fold.i, '.pdf'))
(paste0(lmu.pred.folder, 'rmse.',  model.type, '.', test.fold.i, '.pdf'))
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
dein.info <- openxlsx::read.xlsx("~/Downloads/OneDrive_1_8-25-2025/20250620-1127_Bay1_CNS Disease Panel 120 _RBD_Donor Information for Alamar.xlsx", sheet = 2)
dein.info
dein.info = dein.info %>% select(Deidentified, Age) %>% distinct() %>% filter(!str_detect(Deidentified, 'SC'))
dein.info %>% head()
list.files('figures/prediction/lilly/bridged/include.capped/', full.names = T)
all.res = lapply(list.files('figures/prediction/lilly/bridged/include.capped/', full.names = T), function(model.i){
# all.res = lapply(list.files('figures/prediction/lilly/not.bridged//include.capped/', full.names = T), function(model.i){
# all.res = lapply(list.files('figures/prediction/lilly/bridged/remove.capped//', full.names = T), function(model.i){
print(model.i %>% basename())
model1.res = read.csv(model.i)
model1.res %>% head()
comb.res = dein.info %>% inner_join(model1.res, by = c('Deidentified' = 'X'))
comb.res %>% head()
data.frame(model = basename(model.i), RMSE(comb.res$pred.age, comb.res$Age))
# comb.res %>%
#   ggplot(aes(Age, pred.age)) +
#     geom_smooth(method = 'lm') +
#     geom_abline(slope = 1, intercept = 0) +
#   geom_point()
})
all.res
all.res %>% unlist() %>% mean()
all.res %>% data.table::rbindlist()
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
source("~/Desktop/aging prediction/aging prediction scaled/scripts/04.01.lmu.predict.whole.training.R")
