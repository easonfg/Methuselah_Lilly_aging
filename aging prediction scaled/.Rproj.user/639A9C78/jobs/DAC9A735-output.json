[1,"── \u001B[1mAttaching core tidyverse packages\u001B[22m ──────────────────────── tidyverse 2.0.0 ──\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.1     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n"]
[1,"── \u001B[1mConflicts\u001B[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n"]
[1,"\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n"]
[1,"\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n"]
[1,"\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n"]
[2,"Loading required package: ggrepel\nLoading required package: NULISAseqR\n"]
[2,"Loading required package: ComplexHeatmap\nLoading required package: grid\n"]
[2,"========================================\nComplexHeatmap version 2.20.0\nBioconductor page: http://bioconductor.org/packages/ComplexHeatmap/\nGithub page: https://github.com/jokergoo/ComplexHeatmap\nDocumentation: http://jokergoo.github.io/ComplexHeatmap-reference\n\nIf you use it in published research, please cite either one:\n- Gu, Z. Complex Heatmap Visualization. iMeta 2022.\n- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional \n    genomic data. Bioinformatics 2016.\n\n\nThe new InteractiveComplexHeatmap package can directly export static \ncomplex heatmaps into an interactive Shiny app with zero effort. Have a try!\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(ComplexHeatmap))\n========================================\n\nLoading required package: foreach\n\nAttaching package: ‘foreach’\n\nThe following objects are masked from ‘package:purrr’:\n\n    accumulate, when\n\nLoading required package: iterators\n"]
[2,"Loading required package: parallel\nLoading required package: lattice\n"]
[2,"\nAttaching package: ‘caret’\n\nThe following object is masked from ‘package:purrr’:\n\n    lift\n\nLoading required package: Matrix\n\nAttaching package: ‘Matrix’\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\n"]
[2,"Loaded glmnet 4.1-9\nWelcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m130250\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m12\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (10): Panel, PanelLotNumber, PlateID, SampleName, SampleType, Target, Al...\n"]
[1,"\u001B[32mdbl\u001B[39m  (2): LOD, NPQ\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m64604\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m12\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (10): Panel, PanelLotNumber, PlateID, SampleName, SampleType, Target, Al...\n"]
[1,"\u001B[32mdbl\u001B[39m  (2): LOD, NPQ\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'SampleName', 'subject.id', 'Target'. You\n"]
[1,"can override using the `.groups` argument.\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m503\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (8): SampleName, SampleType, PlateID, BoASampleID, Sex, Race, Ethnicity,...\n"]
[1,"\u001B[32mdbl\u001B[39m (1): Age2\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'Sex'. You can override using the `.groups`\n"]
[1,"argument.\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'SampleName', 'subject.id', 'Target'. You\n"]
[1,"can override using the `.groups` argument.\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m503\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (8): SampleName, SampleType, PlateID, BoASampleID, Sex, Race, Ethnicity,...\n"]
[1,"\u001B[32mdbl\u001B[39m (1): Age2\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'subject.id'. You can override using the\n"]
[1,"`.groups` argument.\n"]
[1,"Called from: eval(statements[[idx]], envir = globalenv())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#157: combined.wide = rbind(alpha.cns.wide %>% t() %>% data.frame(), \n"]
[1,"    argo.cns.wide %>% t() %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#163: res.pca = prcomp(combined.wide, scale = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#164: inflam.groups = as.factor(c(rep(\"alpha\", ncol(alpha.inflam.wide)), \n"]
[1,"    rep(\"argo\", ncol(argo.inflam.wide))))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#165: groups <- fviz_pca_ind(res.pca, col.ind = inflam.groups, palette = c(\"#00AFBB\", \n"]
[1,"    \"#FC4E07\"), addEllipses = TRUE, ellipse.type = \"confidence\", \n"]
[1,"    legend.title = \"Groups\", label = \"none\", repel = TRUE) %>% \n"]
[1,"    print()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#176: combined.wide = rbind(alpha.inflam.wide.bridged %>% t() %>% data.frame(), \n"]
[1,"    argo.inflam.wide %>% t() %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#180: res.pca = prcomp(combined.wide, scale = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#181: inflam.groups = as.factor(c(rep(\"alpha\", ncol(alpha.inflam.wide)), \n"]
[1,"    rep(\"argo\", ncol(argo.inflam.wide))))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#182: groups <- fviz_pca_ind(res.pca, col.ind = inflam.groups, palette = c(\"#00AFBB\", \n"]
[1,"    \"#FC4E07\"), addEllipses = TRUE, ellipse.type = \"confidence\", \n"]
[1,"    legend.title = \"Groups\", label = \"none\", repel = TRUE) %>% \n"]
[1,"    print()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#199: for (harmonized.i in c(\"bridged\", \"not.bridged\")) {\n"]
[1,"    if (harmonized.i == \"bridged\") {\n"]
[1,"        adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"    }\n"]
[1,"    else if (harmonized.i == \"not.bridged\") {\n"]
[1,"        adjusted.wide = org.full.data.wide\n"]
[1,"    }\n"]
[1,"    colnames(adjusted.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(adjusted.wide))\n"]
[1,"    adjusted.wide = adjusted.wide %>% anti_join(argo.full.data.wide %>% \n"]
[1,"        select(subject.id), by = c(SampleName = \"subject.id\"))\n"]
[1,"    if (capped.i == \"remove.capped\") {\n"]
[1,"        adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"    }\n"]
[1,"    x.variables = adjusted.wide %>% select(-c(SampleName, Age2, \n"]
[1,"        Sex))\n"]
[1,"    logical.complete.cases = complete.cases(x.variables)\n"]
[1,"    x.variables = x.variables[logical.complete.cases, ]\n"]
[1,"    y.response = adjusted.wide$Age2\n"]
[1,"    y.response = y.response[logical.complete.cases]\n"]
[1,"    meta.data = adjusted.wide %>% select(SampleName, Age2, Sex)\n"]
[1,"    test.fold <- caret::createFolds(y.response, k = 5, list = TRUE, \n"]
[1,"        returnTrain = FALSE)\n"]
[1,"    res.table = list()\n"]
[1,"    counter = 1\n"]
[1,"    for (test.fold.i in 1:6) {\n"]
[1,"        library(e1071)\n"]
[1,"        library(caret)\n"]
[1,"        train <- x.variables %>% as.matrix()\n"]
[1,"        y_train <- y.response\n"]
[1,"        train.comb = cbind(train, age = y_train)\n"]
[1,"        if (capped.i == \"remove.capped\") {\n"]
[1,"            argo.full.data.wide.alt = argo.full.data.wide %>% \n"]
[1,"                filter(Age2 != 90)\n"]
[1,"        }\n"]
[1,"        else if (capped.i == \"include.capped\") {\n"]
[1,"            argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"        }\n"]
[1,"        sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"            Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"        otherdata.wide = argo.full.data.wide.alt\n"]
[1,"        colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", \n"]
[1,"            colnames(otherdata.wide))\n"]
[1,"        otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"            column_to_rownames(\"subjectid\")\n"]
[1,"        otherdata.wide\n"]
[1,"        library(pROC)\n"]
[1,"        train.comb.reformat = train.comb\n"]
[1,"        colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \n"]
[1,"            \"\", colnames(train.comb.reformat))\n"]
[1,"        protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"            colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"        otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"        train.comb.reformat = train.comb.reformat[, c(protein.list, \n"]
[1,"            \"age\")]\n"]
[1,"        model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"        for (model.type in model.list) {\n"]
[1,"            print(model.type)\n"]
[1,"            if (model.type == \"lm\") {\n"]
[1,"                if (test.fold.i > 5) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"                  svm1$protein[1:20]\n"]
[1,"                  lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                    collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                    data.frame())\n"]
[1,"                  predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"                  model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                      \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                    \"age\"]))\n"]
[1,"                  model.training\n"]
[1,"                  pred.res <- predict(lm.res, otherdata.wide %>% \n"]
[1,"                    data.frame())\n"]
[1,"                  pred.res\n"]
[1,"                  new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                    pred.res + coefficients(model.training)[1]\n"]
[1,"                  new.pred\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  next\n"]
[1,"                }\n"]
[1,"            }\n"]
[1,"            if (model.type == \"elastic.net\") {\n"]
[1,"                if (test.fold.i < 6) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                    \".csv\"))\n"]
[1,"                  sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                  sorted.res = svm1\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                glm.manual = glmnet(x = train.comb.reformat[, \n"]
[1,"                  !colnames(train.comb.reformat) %in% \"age\"], \n"]
[1,"                  y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"                  lambda = sorted.res$lambda[j])\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"])[, 1], Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(glm.manual, otherdata.wide %>% \n"]
[1,"                  as.matrix())\n"]
[1,"                pred.res = pred.res[, 1]\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            if (model.type == \"SVM\") {\n"]
[1,"                if (test.fold.i < 6) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                    \".csv\"))\n"]
[1,"                  sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                  sorted.res = svm1\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"                  gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"                  train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"                  )\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            if (model.type == \"lightGBM\") {\n"]
[1,"                if (test.fold.i < 6) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                    \".csv\"))\n"]
[1,"                  sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                  sorted.res = svm1\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"                  !colnames(train.comb.reformat) %in% \"age\"], \n"]
[1,"                  label = train.comb.reformat[, \"age\"])\n"]
[1,"                vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"                light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"                  metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"                  num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"                  early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"                  verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"                  valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"                yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"                  !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"                  Age = train.comb.reformat[, \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"                  as.matrix())\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"                left_join(sample.annotate %>% select(SampleName, \n"]
[1,"                  age) %>% distinct(), by = \"SampleName\")\n"]
[1,"            others.age %>% head()\n"]
[1,"            others.age$age\n"]
[1,"            pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"            adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"            model <- lm(pred.res ~ others.age$age)\n"]
[1,"            model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"            r2 = summary(model)$r.squared\n"]
[1,"            adj.r2 = summary(model.new)$r.squared\n"]
[1,"            pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"            adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"            plot.data = rbind(data.frame(pred.age = pred.res, \n"]
[1,"                chronological.age = others.age$age, type = \"org\"), \n"]
[1,"                data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"                  type = \"adjusted\"))\n"]
[1,"            p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"                color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"                geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"                x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"                  3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"                annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"                  round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"                  size = 5, color = \"blue\") + annotate(\"text\", \n"]
[1,"                x = -Inf, y = Inf, label = paste0(\"R^2: \", round(r2, \n"]
[1,"                  3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"                annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"                  round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, \n"]
[1,"                  size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"                x = -Inf, y = Inf, label = paste0(\"Corr: \", round(pred.cor, \n"]
[1,"                  3)), hjust = -0.1, vjust = 8, size = 5, color = \"green\") + \n"]
[1,"                annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", \n"]
[1,"                  round(adj.pred.cor, 3)), hjust = -0.1, vjust = 9.5, \n"]
[1,"                  size = 5, color = \"green\") + theme_bw(base_size = 15)\n"]
[1,"            basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"                harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"            dir.create(basel.pred.folder, recursive = T)\n"]
[1,"            pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \n"]
[1,"                \".\", test.fold.i, \".pdf\"))\n"]
[1,"            print(p)\n"]
[1,"            dev.off()\n"]
[1,"            res.table[[counter]] = data.frame(model = model.type, \n"]
[1,"                test.fold = test.fold.i, rmse = pred.rmse, adj.rmse = adj.pred.rmse, \n"]
[1,"                r2 = r2, adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"            counter = counter + 1\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    res.table.final = res.table %>% data.table::rbindlist()\n"]
[1,"    res.table.final = res.table.final %>% mutate(test.fold = ifelse(test.fold == \n"]
[1,"        6, \"best.param\", test.fold))\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    write.csv(res.table.final, paste0(basel.pred.folder, \"res.table.csv\"))\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#203: if (harmonized.i == \"bridged\") {\n"]
[1,"    adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"} else if (harmonized.i == \"not.bridged\") {\n"]
[1,"    adjusted.wide = org.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#204: adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#208: colnames(adjusted.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(adjusted.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#210: adjusted.wide = adjusted.wide %>% anti_join(argo.full.data.wide %>% \n"]
[1,"    select(subject.id), by = c(SampleName = \"subject.id\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#212: if (capped.i == \"remove.capped\") {\n"]
[1,"    adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#217: x.variables = adjusted.wide %>% select(-c(SampleName, Age2, Sex))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#218: logical.complete.cases = complete.cases(x.variables)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#219: x.variables = x.variables[logical.complete.cases, ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#220: y.response = adjusted.wide$Age2\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#221: y.response = y.response[logical.complete.cases]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#222: meta.data = adjusted.wide %>% select(SampleName, Age2, Sex)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#225: test.fold <- caret::createFolds(y.response, k = 5, list = TRUE, \n"]
[1,"    returnTrain = FALSE)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#226: res.table = list()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#227: counter = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#228: for (test.fold.i in 1:6) {\n"]
[1,"    library(e1071)\n"]
[1,"    library(caret)\n"]
[1,"    train <- x.variables %>% as.matrix()\n"]
[1,"    y_train <- y.response\n"]
[1,"    train.comb = cbind(train, age = y_train)\n"]
[1,"    if (capped.i == \"remove.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"            90)\n"]
[1,"    }\n"]
[1,"    else if (capped.i == \"include.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"    }\n"]
[1,"    sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"        Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"    otherdata.wide = argo.full.data.wide.alt\n"]
[1,"    colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"        column_to_rownames(\"subjectid\")\n"]
[1,"    otherdata.wide\n"]
[1,"    library(pROC)\n"]
[1,"    train.comb.reformat = train.comb\n"]
[1,"    colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", \n"]
[1,"        colnames(train.comb.reformat))\n"]
[1,"    protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"        colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"    train.comb.reformat = train.comb.reformat[, c(protein.list, \n"]
[1,"        \"age\")]\n"]
[1,"    model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"    for (model.type in model.list) {\n"]
[1,"        print(model.type)\n"]
[1,"        if (model.type == \"lm\") {\n"]
[1,"            if (test.fold.i > 5) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"                svm1$protein[1:20]\n"]
[1,"                lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                  collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                  data.frame())\n"]
[1,"                predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(lm.res, otherdata.wide %>% \n"]
[1,"                  data.frame())\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                next\n"]
[1,"            }\n"]
[1,"        }\n"]
[1,"        if (model.type == \"elastic.net\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"                lambda = sorted.res$lambda[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(glm.manual, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res = pred.res[, 1]\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"SVM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"                gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"                train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"                )\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"lightGBM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"                \"age\"])\n"]
[1,"            vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"            light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"                metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"                num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"                early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"                verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"                valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"            yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"                Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"            left_join(sample.annotate %>% select(SampleName, \n"]
[1,"                age) %>% distinct(), by = \"SampleName\")\n"]
[1,"        others.age %>% head()\n"]
[1,"        others.age$age\n"]
[1,"        pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"        adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"        model <- lm(pred.res ~ others.age$age)\n"]
[1,"        model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"        r2 = summary(model)$r.squared\n"]
[1,"        adj.r2 = summary(model.new)$r.squared\n"]
[1,"        pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"        adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"        plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"            type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"            type = \"adjusted\"))\n"]
[1,"        p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"            color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"            geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"                3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"                round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"                size = 5, color = \"blue\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"R^2: \", round(r2, \n"]
[1,"                3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"                round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, \n"]
[1,"                size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"Corr: \", round(pred.cor, \n"]
[1,"                3)), hjust = -0.1, vjust = 8, size = 5, color = \"green\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", \n"]
[1,"                round(adj.pred.cor, 3)), hjust = -0.1, vjust = 9.5, \n"]
[1,"                size = 5, color = \"green\") + theme_bw(base_size = 15)\n"]
[1,"        basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"            harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"        dir.create(basel.pred.folder, recursive = T)\n"]
[1,"        pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", \n"]
[1,"            test.fold.i, \".pdf\"))\n"]
[1,"        print(p)\n"]
[1,"        dev.off()\n"]
[1,"        res.table[[counter]] = data.frame(model = model.type, \n"]
[1,"            test.fold = test.fold.i, rmse = pred.rmse, adj.rmse = adj.pred.rmse, \n"]
[1,"            r2 = r2, adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"        counter = counter + 1\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[2,"Type 'citation(\"pROC\")' for a citation.\n\nAttaching package: ‘pROC’\n\nThe following objects are masked from ‘package:stats’:\n\n    cov, smooth, var\n\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[2,"Warning message:\n\u001B[1m\u001B[22mUsing an external vector in selections was deprecated in tidyselect 1.1.0.\n\u001B[36mℹ\u001B[39m Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(protein.list)\n\n  # Now:\n  data %>% select(all_of(protein.list))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>. \n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: "]
[1,"light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#344: svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m322\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m7\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): protein\n"]
[1,"\u001B[32mdbl\u001B[39m (6): ...1, Estimate, Std..Error, t.value, Pr...t.., adj.pval\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#345: svm1$protein[1:20]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#346: lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"    collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#354: predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#357: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"    \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#360: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#361: pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#362: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#365: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#366: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#446: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m  (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, num_leaves, max_depth, learning_rate, feature_fraction, lamb...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#447: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#448: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#413: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, gamma, cost, mean.rmse, mean.rank, rmse.rank, ranks.rank, mea...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#414: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#415: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#379: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, alpha, lambda, mean.rmse, mean.rank, rmse.rank, ranks.rank, m...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#380: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#381: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#544: res.table.final = res.table %>% data.table::rbindlist()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#545: res.table.final = res.table.final %>% mutate(test.fold = ifelse(test.fold == \n"]
[1,"    6, \"best.param\", test.fold))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#546: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#547: write.csv(res.table.final, paste0(basel.pred.folder, \"res.table.csv\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#203: if (harmonized.i == \"bridged\") {\n"]
[1,"    adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"} else if (harmonized.i == \"not.bridged\") {\n"]
[1,"    adjusted.wide = org.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#203: if (harmonized.i == \"not.bridged\") {\n"]
[1,"    adjusted.wide = org.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#206: adjusted.wide = org.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#208: colnames(adjusted.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(adjusted.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#210: adjusted.wide = adjusted.wide %>% anti_join(argo.full.data.wide %>% \n"]
[1,"    select(subject.id), by = c(SampleName = \"subject.id\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#212: if (capped.i == \"remove.capped\") {\n"]
[1,"    adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#217: x.variables = adjusted.wide %>% select(-c(SampleName, Age2, Sex))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#218: logical.complete.cases = complete.cases(x.variables)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#219: x.variables = x.variables[logical.complete.cases, ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#220: y.response = adjusted.wide$Age2\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#221: y.response = y.response[logical.complete.cases]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#222: meta.data = adjusted.wide %>% select(SampleName, Age2, Sex)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#225: test.fold <- caret::createFolds(y.response, k = 5, list = TRUE, \n"]
[1,"    returnTrain = FALSE)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#226: res.table = list()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#227: counter = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#228: for (test.fold.i in 1:6) {\n"]
[1,"    library(e1071)\n"]
[1,"    library(caret)\n"]
[1,"    train <- x.variables %>% as.matrix()\n"]
[1,"    y_train <- y.response\n"]
[1,"    train.comb = cbind(train, age = y_train)\n"]
[1,"    if (capped.i == \"remove.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"            90)\n"]
[1,"    }\n"]
[1,"    else if (capped.i == \"include.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"    }\n"]
[1,"    sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"        Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"    otherdata.wide = argo.full.data.wide.alt\n"]
[1,"    colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"        column_to_rownames(\"subjectid\")\n"]
[1,"    otherdata.wide\n"]
[1,"    library(pROC)\n"]
[1,"    train.comb.reformat = train.comb\n"]
[1,"    colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", \n"]
[1,"        colnames(train.comb.reformat))\n"]
[1,"    protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"        colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"    train.comb.reformat = train.comb.reformat[, c(protein.list, \n"]
[1,"        \"age\")]\n"]
[1,"    model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"    for (model.type in model.list) {\n"]
[1,"        print(model.type)\n"]
[1,"        if (model.type == \"lm\") {\n"]
[1,"            if (test.fold.i > 5) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"                svm1$protein[1:20]\n"]
[1,"                lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                  collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                  data.frame())\n"]
[1,"                predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(lm.res, otherdata.wide %>% \n"]
[1,"                  data.frame())\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                next\n"]
[1,"            }\n"]
[1,"        }\n"]
[1,"        if (model.type == \"elastic.net\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"                lambda = sorted.res$lambda[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(glm.manual, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res = pred.res[, 1]\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"SVM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"                gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"                train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"                )\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"lightGBM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"                \"age\"])\n"]
[1,"            vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"            light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"                metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"                num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"                early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"                verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"                valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"            yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"                Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"            left_join(sample.annotate %>% select(SampleName, \n"]
[1,"                age) %>% distinct(), by = \"SampleName\")\n"]
[1,"        others.age %>% head()\n"]
[1,"        others.age$age\n"]
[1,"        pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"        adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"        model <- lm(pred.res ~ others.age$age)\n"]
[1,"        model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"        r2 = summary(model)$r.squared\n"]
[1,"        adj.r2 = summary(model.new)$r.squared\n"]
[1,"        pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"        adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"        plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"            type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"            type = \"adjusted\"))\n"]
[1,"        p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"            color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"            geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"                3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"                round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"                size = 5, color = \"blue\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"R^2: \", round(r2, \n"]
[1,"                3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"                round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, \n"]
[1,"                size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"Corr: \", round(pred.cor, \n"]
[1,"                3)), hjust = -0.1, vjust = 8, size = 5, color = \"green\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", \n"]
[1,"                round(adj.pred.cor, 3)), hjust = -0.1, vjust = 9.5, \n"]
[1,"                size = 5, color = \"green\") + theme_bw(base_size = 15)\n"]
[1,"        basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"            harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"        dir.create(basel.pred.folder, recursive = T)\n"]
[1,"        pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", \n"]
[1,"            test.fold.i, \".pdf\"))\n"]
[1,"        print(p)\n"]
[1,"        dev.off()\n"]
[1,"        res.table[[counter]] = data.frame(model = model.type, \n"]
[1,"            test.fold = test.fold.i, rmse = pred.rmse, adj.rmse = adj.pred.rmse, \n"]
[1,"            r2 = r2, adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"        counter = counter + 1\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: "]
[1,"model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#310: argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#344: svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m322\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m7\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): protein\n"]
[1,"\u001B[32mdbl\u001B[39m (6): ...1, Estimate, Std..Error, t.value, Pr...t.., adj.pval\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#345: svm1$protein[1:20]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#346: lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"    collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#354: predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#357: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"    \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#360: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#361: pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#362: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#365: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#366: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#446: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m  (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, num_leaves, max_depth, learning_rate, feature_fraction, lamb...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#447: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#448: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#413: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, gamma, cost, mean.rmse, mean.rank, rmse.rank, ranks.rank, mea...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#414: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#415: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#379: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, alpha, lambda, mean.rmse, mean.rank, rmse.rank, ranks.rank, m...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#380: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#381: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/include.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#544: res.table.final = res.table %>% data.table::rbindlist()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#545: res.table.final = res.table.final %>% mutate(test.fold = ifelse(test.fold == \n"]
[1,"    6, \"best.param\", test.fold))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#546: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#547: write.csv(res.table.final, paste0(basel.pred.folder, \"res.table.csv\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#17: alpha.data.inflam <- read_csv(\"data/methuselah.alpha/inflammation/20240520_P-000412_Methuselah-Foundation_NULISAseq_TAP_Counts_Report_FULL.csv\") %>% \n"]
[1,"    filter(!grepl(\"SC\", SampleType)) %>% mutate(subject.id = str_extract(SampleName, \n"]
[1,"    \"(?<=_)[^_]*$\"))\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m130250\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m12\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (10): Panel, PanelLotNumber, PlateID, SampleName, SampleType, Target, Al...\n"]
[1,"\u001B[32mdbl\u001B[39m  (2): LOD, NPQ\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#20: alpha.data.inflam$SampleName\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#21: alpha.data.cns <- read_csv(\"data/methuselah.alpha/CNS/20240520_P-000412_Methuselah-Foundation_NULISAseq_TAP_Counts_Report_FULL.csv\") %>% \n"]
[1,"    filter(!grepl(\"SC\", SampleType)) %>% mutate(subject.id = str_extract(SampleName, \n"]
[1,"    \"(?<=_)[^_]*$\"))\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m64604\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m12\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (10): Panel, PanelLotNumber, PlateID, SampleName, SampleType, Target, Al...\n"]
[1,"\u001B[32mdbl\u001B[39m  (2): LOD, NPQ\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#24: org.alpha.data = rbind(alpha.data.inflam, alpha.data.cns) %>% \n"]
[1,"    group_by(SampleName, subject.id, Target, SampleType) %>% \n"]
[1,"    summarise(NPQ = mean(NPQ)) %>% ungroup()\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'SampleName', 'subject.id', 'Target'. You\n"]
[1,"can override using the `.groups` argument.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#28: metadata = read_csv(\"data/methuselah.alpha/sample_metadata.csv\")\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m503\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (8): SampleName, SampleType, PlateID, BoASampleID, Sex, Race, Ethnicity,...\n"]
[1,"\u001B[32mdbl\u001B[39m (1): Age2\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#29: metadata %>% group_by(Sex, Race) %>% summarise(n_distinct(SampleName))\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'Sex'. You can override using the `.groups`\n"]
[1,"argument.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#30: metadata\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#32: full.data = org.alpha.data %>% left_join(metadata, by = c(\"SampleName\", \n"]
[1,"    \"SampleType\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#33: full.data\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#37: org.full.data.wide = full.data %>% select(SampleName, Sex, Age2, \n"]
[1,"    Target, NPQ) %>% pivot_wider(names_from = \"Target\", values_from = \"NPQ\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#39: org.full.data.wide = org.full.data.wide %>% mutate(subject.id = str_extract(SampleName, \n"]
[1,"    \"(?<=_)[^_]*$\")) %>% mutate(SampleName = subject.id) %>% \n"]
[1,"    select(-subject.id)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#44: argo.data.inflam <- openxlsx::read.xlsx(\"data/methuselah.argo/20250819_P-000412_Methuselah-Foundation_NULISAseq_TAP_Counts_Report_FULL.xlsx\", \n"]
[1,"    sheet = 1) %>% filter(!grepl(\"SC\", SampleType)) %>% mutate(SampleName = str_replace(SampleName, \n"]
[1,"    \"_[^_]*$\", \"\")) %>% mutate(subject.id = str_extract(SampleName, \n"]
[1,"    \"(?<=_)[^_]*$\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#48: argo.data.cns <- openxlsx::read.xlsx(\"data/methuselah.argo/20250819_P-000412_Methuselah-Foundation_NULISAseq_TAP_Counts_Report_FULL[27].xlsx\", \n"]
[1,"    sheet = 1) %>% filter(!grepl(\"SC\", SampleType)) %>% mutate(SampleName = str_replace(SampleName, \n"]
[1,"    \"_[^_]*$\", \"\")) %>% mutate(subject.id = str_extract(SampleName, \n"]
[1,"    \"(?<=_)[^_]*$\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#52: argo.data = rbind(argo.data.inflam, argo.data.cns) %>% group_by(SampleName, \n"]
[1,"    subject.id, Target, SampleType) %>% summarise(NPQ = mean(NPQ)) %>% \n"]
[1,"    ungroup()\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'SampleName', 'subject.id', 'Target'. You\n"]
[1,"can override using the `.groups` argument.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#56: metadata = read_csv(\"data/methuselah.alpha/sample_metadata.csv\")\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m503\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (8): SampleName, SampleType, PlateID, BoASampleID, Sex, Race, Ethnicity,...\n"]
[1,"\u001B[32mdbl\u001B[39m (1): Age2\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#58: argo.full.data = argo.data %>% left_join(metadata %>% mutate(subject.id = str_extract(SampleName, \n"]
[1,"    \"(?<=_)[^_]*$\")), by = c(\"subject.id\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#61: argo.full.data.wide = argo.full.data %>% select(subject.id, Sex, \n"]
[1,"    Age2, Target, NPQ) %>% pivot_wider(names_from = \"Target\", \n"]
[1,"    values_from = \"NPQ\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#72: argo.data.inflam %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#73: subject.intersect = intersect(argo.data.inflam$subject.id, alpha.data.inflam$subject.id)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#75: inflam.target.intersect = intersect(argo.data.inflam$Target, \n"]
[1,"    alpha.data.inflam$Target)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#76: cns.target.intersect = intersect(argo.data.cns$Target, alpha.data.cns$Target)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#77: inflam.target.intersect\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#78: cns.target.intersect\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#83: alpha.inflam.wide = alpha.data.inflam %>% select(subject.id, \n"]
[1,"    Target, NPQ) %>% pivot_wider(names_from = \"subject.id\", values_from = \"NPQ\") %>% \n"]
[1,"    column_to_rownames(\"Target\") %>% .[inflam.target.intersect, \n"]
[1,"    ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#85: argo.inflam.wide = argo.data.inflam %>% select(subject.id, Target, \n"]
[1,"    NPQ) %>% pivot_wider(names_from = \"subject.id\", values_from = \"NPQ\") %>% \n"]
[1,"    column_to_rownames(\"Target\") %>% .[inflam.target.intersect, \n"]
[1,"    ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#87: alpha.inflam.wide %>% dim()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#88: argo.inflam.wide %>% dim()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#89: alpha.inflam.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#90: argo.inflam.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#91: alpha.cns.wide = alpha.data.cns %>% select(subject.id, Target, \n"]
[1,"    NPQ) %>% pivot_wider(names_from = \"subject.id\", values_from = \"NPQ\") %>% \n"]
[1,"    column_to_rownames(\"Target\") %>% .[cns.target.intersect, \n"]
[1,"    ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#93: argo.cns.wide = argo.data.cns %>% select(subject.id, Target, \n"]
[1,"    NPQ) %>% pivot_wider(names_from = \"subject.id\", values_from = \"NPQ\") %>% \n"]
[1,"    column_to_rownames(\"Target\") %>% .[cns.target.intersect, \n"]
[1,"    ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#98: inflam.bridge_terms <- apply(argo.inflam.wide[, subject.intersect] - \n"]
[1,"    alpha.inflam.wide[, subject.intersect], 1, median)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#99: inflam.bridge_terms\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#100: alpha.inflam.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#101: alpha.inflam.wide.bridged <- alpha.inflam.wide + inflam.bridge_terms\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#102: alpha.inflam.bridged.long = alpha.inflam.wide.bridged %>% rownames_to_column(\"Target\") %>% \n"]
[1,"    pivot_longer(cols = !Target, names_to = \"subject.id\", values_to = \"NPQ\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#105: alpha.inflam.bridged.long\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#107: cns.bridge_terms <- apply(argo.cns.wide[, subject.intersect] - \n"]
[1,"    alpha.cns.wide[, subject.intersect], 1, median)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#108: cns.bridge_terms\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#109: alpha.cns.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#110: alpha.cns.wide.bridged <- alpha.cns.wide + cns.bridge_terms\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#111: alpha.cns.bridged.long = alpha.cns.wide.bridged %>% rownames_to_column(\"Target\") %>% \n"]
[1,"    pivot_longer(cols = !Target, names_to = \"subject.id\", values_to = \"NPQ\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#115: bridged.alpha.data = rbind(alpha.inflam.bridged.long, alpha.cns.bridged.long) %>% \n"]
[1,"    group_by(subject.id, Target) %>% summarise(NPQ = mean(NPQ)) %>% \n"]
[1,"    ungroup()\n"]
[1,"\u001B[1m\u001B[22m`summarise()` has grouped output by 'subject.id'. You can override using the\n"]
[1,"`.groups` argument.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#119: org.alpha.data\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#120: bridged.full.data = bridged.alpha.data %>% left_join(metadata %>% \n"]
[1,"    mutate(subject.id = str_extract(SampleName, \"(?<=_)[^_]*$\")), \n"]
[1,"    by = c(\"subject.id\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#124: bridged.alpha.full.data.wide = bridged.full.data %>% select(subject.id, \n"]
[1,"    Sex, Age2, Target, NPQ) %>% pivot_wider(names_from = \"Target\", \n"]
[1,"    values_from = \"NPQ\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#126: bridged.alpha.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#133: both.methu.data = inner_join(alpha.data.inflam, argo.data.inflam, \n"]
[1,"    by = c(\"subject.id\", \"Target\"), suffix = c(\".alpha\", \".argo\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#134: both.methu.data = inner_join(alpha.data.cns, argo.data.cns, by = c(\"subject.id\", \n"]
[1,"    \"Target\"), suffix = c(\".alpha\", \".argo\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#137: both.methu.data = inner_join(alpha.inflam.wide.bridged %>% rownames_to_column(\"Target\") %>% \n"]
[1,"    pivot_longer(cols = !Target, names_to = \"subject.id\", values_to = \"NPQ\"), \n"]
[1,"    argo.inflam.wide %>% rownames_to_column(\"Target\") %>% pivot_longer(cols = !Target, \n"]
[1,"        names_to = \"subject.id\", values_to = \"NPQ\"), by = c(\"subject.id\", \n"]
[1,"        \"Target\"), suffix = c(\".alpha\", \".argo\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#141: both.methu.data = inner_join(alpha.cns.wide.bridged %>% rownames_to_column(\"Target\") %>% \n"]
[1,"    pivot_longer(cols = !Target, names_to = \"subject.id\", values_to = \"NPQ\"), \n"]
[1,"    argo.cns.wide %>% rownames_to_column(\"Target\") %>% pivot_longer(cols = !Target, \n"]
[1,"        names_to = \"subject.id\", values_to = \"NPQ\"), by = c(\"subject.id\", \n"]
[1,"        \"Target\"), suffix = c(\".alpha\", \".argo\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#146: both.methu.data\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#149: both.methu.data %>% ggplot(aes(NPQ.alpha, NPQ.argo, color = Target)) + \n"]
[1,"    geom_point() + geom_abline(slope = 1) + theme(legend.position = \"None\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#156: browser()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#157: combined.wide = rbind(alpha.cns.wide %>% t() %>% data.frame(), \n"]
[1,"    argo.cns.wide %>% t() %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#163: res.pca = prcomp(combined.wide, scale = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#164: inflam.groups = as.factor(c(rep(\"alpha\", ncol(alpha.inflam.wide)), \n"]
[1,"    rep(\"argo\", ncol(argo.inflam.wide))))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#165: groups <- fviz_pca_ind(res.pca, col.ind = inflam.groups, palette = c(\"#00AFBB\", \n"]
[1,"    \"#FC4E07\"), addEllipses = TRUE, ellipse.type = \"confidence\", \n"]
[1,"    legend.title = \"Groups\", label = \"none\", repel = TRUE) %>% \n"]
[1,"    print()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#176: combined.wide = rbind(alpha.inflam.wide.bridged %>% t() %>% data.frame(), \n"]
[1,"    argo.inflam.wide %>% t() %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#180: res.pca = prcomp(combined.wide, scale = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#181: inflam.groups = as.factor(c(rep(\"alpha\", ncol(alpha.inflam.wide)), \n"]
[1,"    rep(\"argo\", ncol(argo.inflam.wide))))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#182: groups <- fviz_pca_ind(res.pca, col.ind = inflam.groups, palette = c(\"#00AFBB\", \n"]
[1,"    \"#FC4E07\"), addEllipses = TRUE, ellipse.type = \"confidence\", \n"]
[1,"    legend.title = \"Groups\", label = \"none\", repel = TRUE) %>% \n"]
[1,"    print()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#199: for (harmonized.i in c(\"bridged\", \"not.bridged\")) {\n"]
[1,"    if (harmonized.i == \"bridged\") {\n"]
[1,"        adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"    }\n"]
[1,"    else if (harmonized.i == \"not.bridged\") {\n"]
[1,"        adjusted.wide = org.full.data.wide\n"]
[1,"    }\n"]
[1,"    colnames(adjusted.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(adjusted.wide))\n"]
[1,"    adjusted.wide = adjusted.wide %>% anti_join(argo.full.data.wide %>% \n"]
[1,"        select(subject.id), by = c(SampleName = \"subject.id\"))\n"]
[1,"    if (capped.i == \"remove.capped\") {\n"]
[1,"        adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"    }\n"]
[1,"    x.variables = adjusted.wide %>% select(-c(SampleName, Age2, \n"]
[1,"        Sex))\n"]
[1,"    logical.complete.cases = complete.cases(x.variables)\n"]
[1,"    x.variables = x.variables[logical.complete.cases, ]\n"]
[1,"    y.response = adjusted.wide$Age2\n"]
[1,"    y.response = y.response[logical.complete.cases]\n"]
[1,"    meta.data = adjusted.wide %>% select(SampleName, Age2, Sex)\n"]
[1,"    test.fold <- caret::createFolds(y.response, k = 5, list = TRUE, \n"]
[1,"        returnTrain = FALSE)\n"]
[1,"    res.table = list()\n"]
[1,"    counter = 1\n"]
[1,"    for (test.fold.i in 1:6) {\n"]
[1,"        library(e1071)\n"]
[1,"        library(caret)\n"]
[1,"        train <- x.variables %>% as.matrix()\n"]
[1,"        y_train <- y.response\n"]
[1,"        train.comb = cbind(train, age = y_train)\n"]
[1,"        if (capped.i == \"remove.capped\") {\n"]
[1,"            argo.full.data.wide.alt = argo.full.data.wide %>% \n"]
[1,"                filter(Age2 != 90)\n"]
[1,"        }\n"]
[1,"        else if (capped.i == \"include.capped\") {\n"]
[1,"            argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"        }\n"]
[1,"        sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"            Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"        otherdata.wide = argo.full.data.wide.alt\n"]
[1,"        colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", \n"]
[1,"            colnames(otherdata.wide))\n"]
[1,"        otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"            column_to_rownames(\"subjectid\")\n"]
[1,"        otherdata.wide\n"]
[1,"        library(pROC)\n"]
[1,"        train.comb.reformat = train.comb\n"]
[1,"        colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \n"]
[1,"            \"\", colnames(train.comb.reformat))\n"]
[1,"        protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"            colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"        otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"        train.comb.reformat = train.comb.reformat[, c(protein.list, \n"]
[1,"            \"age\")]\n"]
[1,"        model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"        for (model.type in model.list) {\n"]
[1,"            print(model.type)\n"]
[1,"            if (model.type == \"lm\") {\n"]
[1,"                if (test.fold.i > 5) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"                  svm1$protein[1:20]\n"]
[1,"                  lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                    collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                    data.frame())\n"]
[1,"                  predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"                  model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                      \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                    \"age\"]))\n"]
[1,"                  model.training\n"]
[1,"                  pred.res <- predict(lm.res, otherdata.wide %>% \n"]
[1,"                    data.frame())\n"]
[1,"                  pred.res\n"]
[1,"                  new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                    pred.res + coefficients(model.training)[1]\n"]
[1,"                  new.pred\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  next\n"]
[1,"                }\n"]
[1,"            }\n"]
[1,"            if (model.type == \"elastic.net\") {\n"]
[1,"                if (test.fold.i < 6) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                    \".csv\"))\n"]
[1,"                  sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                  sorted.res = svm1\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                glm.manual = glmnet(x = train.comb.reformat[, \n"]
[1,"                  !colnames(train.comb.reformat) %in% \"age\"], \n"]
[1,"                  y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"                  lambda = sorted.res$lambda[j])\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"])[, 1], Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(glm.manual, otherdata.wide %>% \n"]
[1,"                  as.matrix())\n"]
[1,"                pred.res = pred.res[, 1]\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            if (model.type == \"SVM\") {\n"]
[1,"                if (test.fold.i < 6) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                    \".csv\"))\n"]
[1,"                  sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                  sorted.res = svm1\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"                  gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"                  train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"                  )\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            if (model.type == \"lightGBM\") {\n"]
[1,"                if (test.fold.i < 6) {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                    \".csv\"))\n"]
[1,"                  sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                else {\n"]
[1,"                  svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                    model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                  sorted.res = svm1\n"]
[1,"                  j = 1\n"]
[1,"                }\n"]
[1,"                train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"                  !colnames(train.comb.reformat) %in% \"age\"], \n"]
[1,"                  label = train.comb.reformat[, \"age\"])\n"]
[1,"                vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"                light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"                  metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"                  num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"                  early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"                  verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"                  valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"                yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"                  !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"                  Age = train.comb.reformat[, \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"                  as.matrix())\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"                left_join(sample.annotate %>% select(SampleName, \n"]
[1,"                  age) %>% distinct(), by = \"SampleName\")\n"]
[1,"            others.age %>% head()\n"]
[1,"            others.age$age\n"]
[1,"            pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"            adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"            model <- lm(pred.res ~ others.age$age)\n"]
[1,"            model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"            r2 = summary(model)$r.squared\n"]
[1,"            adj.r2 = summary(model.new)$r.squared\n"]
[1,"            pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"            adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"            plot.data = rbind(data.frame(pred.age = pred.res, \n"]
[1,"                chronological.age = others.age$age, type = \"org\"), \n"]
[1,"                data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"                  type = \"adjusted\"))\n"]
[1,"            p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"                color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"                geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"                x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"                  3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"                annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"                  round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"                  size = 5, color = \"blue\") + annotate(\"text\", \n"]
[1,"                x = -Inf, y = Inf, label = paste0(\"R^2: \", round(r2, \n"]
[1,"                  3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"                annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"                  round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, \n"]
[1,"                  size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"                x = -Inf, y = Inf, label = paste0(\"Corr: \", round(pred.cor, \n"]
[1,"                  3)), hjust = -0.1, vjust = 8, size = 5, color = \"green\") + \n"]
[1,"                annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", \n"]
[1,"                  round(adj.pred.cor, 3)), hjust = -0.1, vjust = 9.5, \n"]
[1,"                  size = 5, color = \"green\") + theme_bw(base_size = 15)\n"]
[1,"            basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"                harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"            dir.create(basel.pred.folder, recursive = T)\n"]
[1,"            pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \n"]
[1,"                \".\", test.fold.i, \".pdf\"))\n"]
[1,"            print(p)\n"]
[1,"            dev.off()\n"]
[1,"            res.table[[counter]] = data.frame(model = model.type, \n"]
[1,"                test.fold = test.fold.i, rmse = pred.rmse, adj.rmse = adj.pred.rmse, \n"]
[1,"                r2 = r2, adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"            counter = counter + 1\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    res.table.final = res.table %>% data.table::rbindlist()\n"]
[1,"    res.table.final = res.table.final %>% mutate(test.fold = ifelse(test.fold == \n"]
[1,"        6, \"best.param\", test.fold))\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    write.csv(res.table.final, paste0(basel.pred.folder, \"res.table.csv\"))\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#203: if (harmonized.i == \"bridged\") {\n"]
[1,"    adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"} else if (harmonized.i == \"not.bridged\") {\n"]
[1,"    adjusted.wide = org.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#204: adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#208: colnames(adjusted.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(adjusted.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#210: adjusted.wide = adjusted.wide %>% anti_join(argo.full.data.wide %>% \n"]
[1,"    select(subject.id), by = c(SampleName = \"subject.id\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#212: if (capped.i == \"remove.capped\") {\n"]
[1,"    adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#213: adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#217: x.variables = adjusted.wide %>% select(-c(SampleName, Age2, Sex))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#218: logical.complete.cases = complete.cases(x.variables)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#219: x.variables = x.variables[logical.complete.cases, ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#220: y.response = adjusted.wide$Age2\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#221: y.response = y.response[logical.complete.cases]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#222: meta.data = adjusted.wide %>% select(SampleName, Age2, Sex)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#225: test.fold <- caret::createFolds(y.response, k = 5, list = TRUE, \n"]
[1,"    returnTrain = FALSE)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#226: res.table = list()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#227: counter = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#228: for (test.fold.i in 1:6) {\n"]
[1,"    library(e1071)\n"]
[1,"    library(caret)\n"]
[1,"    train <- x.variables %>% as.matrix()\n"]
[1,"    y_train <- y.response\n"]
[1,"    train.comb = cbind(train, age = y_train)\n"]
[1,"    if (capped.i == \"remove.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"            90)\n"]
[1,"    }\n"]
[1,"    else if (capped.i == \"include.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"    }\n"]
[1,"    sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"        Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"    otherdata.wide = argo.full.data.wide.alt\n"]
[1,"    colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"        column_to_rownames(\"subjectid\")\n"]
[1,"    otherdata.wide\n"]
[1,"    library(pROC)\n"]
[1,"    train.comb.reformat = train.comb\n"]
[1,"    colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", \n"]
[1,"        colnames(train.comb.reformat))\n"]
[1,"    protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"        colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"    train.comb.reformat = train.comb.reformat[, c(protein.list, \n"]
[1,"        \"age\")]\n"]
[1,"    model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"    for (model.type in model.list) {\n"]
[1,"        print(model.type)\n"]
[1,"        if (model.type == \"lm\") {\n"]
[1,"            if (test.fold.i > 5) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"                svm1$protein[1:20]\n"]
[1,"                lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                  collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                  data.frame())\n"]
[1,"                predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(lm.res, otherdata.wide %>% \n"]
[1,"                  data.frame())\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                next\n"]
[1,"            }\n"]
[1,"        }\n"]
[1,"        if (model.type == \"elastic.net\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"                lambda = sorted.res$lambda[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(glm.manual, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res = pred.res[, 1]\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"SVM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"                gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"                train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"                )\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"lightGBM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"                \"age\"])\n"]
[1,"            vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"            light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"                metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"                num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"                early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"                verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"                valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"            yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"                Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"            left_join(sample.annotate %>% select(SampleName, \n"]
[1,"                age) %>% distinct(), by = \"SampleName\")\n"]
[1,"        others.age %>% head()\n"]
[1,"        others.age$age\n"]
[1,"        pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"        adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"        model <- lm(pred.res ~ others.age$age)\n"]
[1,"        model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"        r2 = summary(model)$r.squared\n"]
[1,"        adj.r2 = summary(model.new)$r.squared\n"]
[1,"        pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"        adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"        plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"            type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"            type = \"adjusted\"))\n"]
[1,"        p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"            color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"            geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"                3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"                round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"                size = 5, color = \"blue\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"R^2: \", round(r2, \n"]
[1,"                3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"                round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, \n"]
[1,"                size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"Corr: \", round(pred.cor, \n"]
[1,"                3)), hjust = -0.1, vjust = 8, size = 5, color = \"green\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", \n"]
[1,"                round(adj.pred.cor, 3)), hjust = -0.1, vjust = 9.5, \n"]
[1,"                size = 5, color = \"green\") + theme_bw(base_size = 15)\n"]
[1,"        basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"            harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"        dir.create(basel.pred.folder, recursive = T)\n"]
[1,"        pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", \n"]
[1,"            test.fold.i, \".pdf\"))\n"]
[1,"        print(p)\n"]
[1,"        dev.off()\n"]
[1,"        res.table[[counter]] = data.frame(model = model.type, \n"]
[1,"            test.fold = test.fold.i, rmse = pred.rmse, adj.rmse = adj.pred.rmse, \n"]
[1,"            r2 = r2, adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"        counter = counter + 1\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: "]
[1,"glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#344: svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m322\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m7\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): protein\n"]
[1,"\u001B[32mdbl\u001B[39m (6): ...1, Estimate, Std..Error, t.value, Pr...t.., adj.pval\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#345: svm1$protein[1:20]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#346: lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"    collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#354: predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#357: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"    \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#360: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#361: pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#362: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#365: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#366: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#446: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m  (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, num_leaves, max_depth, learning_rate, feature_fraction, lamb...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#447: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#448: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#413: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, gamma, cost, mean.rmse, mean.rank, rmse.rank, ranks.rank, mea...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#414: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#415: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#379: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, alpha, lambda, mean.rmse, mean.rank, rmse.rank, ranks.rank, m...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#380: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#381: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#544: res.table.final = res.table %>% data.table::rbindlist()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#545: res.table.final = res.table.final %>% mutate(test.fold = ifelse(test.fold == \n"]
[1,"    6, \"best.param\", test.fold))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#546: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#547: write.csv(res.table.final, paste0(basel.pred.folder, \"res.table.csv\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#203: if (harmonized.i == \"bridged\") {\n"]
[1,"    adjusted.wide = bridged.alpha.full.data.wide %>% rename(SampleName = subject.id)\n"]
[1,"} else if (harmonized.i == \"not.bridged\") {\n"]
[1,"    adjusted.wide = org.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#203: if (harmonized.i == \"not.bridged\") {\n"]
[1,"    adjusted.wide = org.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#206: adjusted.wide = org.full.data.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#208: colnames(adjusted.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(adjusted.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#210: adjusted.wide = adjusted.wide %>% anti_join(argo.full.data.wide %>% \n"]
[1,"    select(subject.id), by = c(SampleName = \"subject.id\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#212: if (capped.i == \"remove.capped\") {\n"]
[1,"    adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#213: adjusted.wide = adjusted.wide %>% filter(Age2 != 90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#217: x.variables = adjusted.wide %>% select(-c(SampleName, Age2, Sex))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#218: logical.complete.cases = complete.cases(x.variables)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#219: x.variables = x.variables[logical.complete.cases, ]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#220: y.response = adjusted.wide$Age2\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#221: y.response = y.response[logical.complete.cases]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#222: meta.data = adjusted.wide %>% select(SampleName, Age2, Sex)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#225: test.fold <- caret::createFolds(y.response, k = 5, list = TRUE, \n"]
[1,"    returnTrain = FALSE)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#226: res.table = list()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#227: counter = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#228: for (test.fold.i in 1:6) {\n"]
[1,"    library(e1071)\n"]
[1,"    library(caret)\n"]
[1,"    train <- x.variables %>% as.matrix()\n"]
[1,"    y_train <- y.response\n"]
[1,"    train.comb = cbind(train, age = y_train)\n"]
[1,"    if (capped.i == \"remove.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"            90)\n"]
[1,"    }\n"]
[1,"    else if (capped.i == \"include.capped\") {\n"]
[1,"        argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"    }\n"]
[1,"    sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"        Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"    otherdata.wide = argo.full.data.wide.alt\n"]
[1,"    colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"        column_to_rownames(\"subjectid\")\n"]
[1,"    otherdata.wide\n"]
[1,"    library(pROC)\n"]
[1,"    train.comb.reformat = train.comb\n"]
[1,"    colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", \n"]
[1,"        colnames(train.comb.reformat))\n"]
[1,"    protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"        colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"    otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"    train.comb.reformat = train.comb.reformat[, c(protein.list, \n"]
[1,"        \"age\")]\n"]
[1,"    model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"    for (model.type in model.list) {\n"]
[1,"        print(model.type)\n"]
[1,"        if (model.type == \"lm\") {\n"]
[1,"            if (test.fold.i > 5) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"                svm1$protein[1:20]\n"]
[1,"                lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                  collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                  data.frame())\n"]
[1,"                predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"                model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                  train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                    \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                  \"age\"]))\n"]
[1,"                model.training\n"]
[1,"                pred.res <- predict(lm.res, otherdata.wide %>% \n"]
[1,"                  data.frame())\n"]
[1,"                pred.res\n"]
[1,"                new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                  pred.res + coefficients(model.training)[1]\n"]
[1,"                new.pred\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                next\n"]
[1,"            }\n"]
[1,"        }\n"]
[1,"        if (model.type == \"elastic.net\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"                lambda = sorted.res$lambda[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(glm.manual, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res = pred.res[, 1]\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"SVM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"                gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"                train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"                )\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        if (model.type == \"lightGBM\") {\n"]
[1,"            if (test.fold.i < 6) {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                  \".csv\"))\n"]
[1,"                sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            else {\n"]
[1,"                svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                  model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"                sorted.res = svm1\n"]
[1,"                j = 1\n"]
[1,"            }\n"]
[1,"            train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"                \"age\"])\n"]
[1,"            vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"            light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"                metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"                num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"                early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"                verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"                valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"            yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"                !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"                Age = train.comb.reformat[, \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"                as.matrix())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"            left_join(sample.annotate %>% select(SampleName, \n"]
[1,"                age) %>% distinct(), by = \"SampleName\")\n"]
[1,"        others.age %>% head()\n"]
[1,"        others.age$age\n"]
[1,"        pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"        adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"        model <- lm(pred.res ~ others.age$age)\n"]
[1,"        model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"        r2 = summary(model)$r.squared\n"]
[1,"        adj.r2 = summary(model.new)$r.squared\n"]
[1,"        pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"        adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"        plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"            type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"            type = \"adjusted\"))\n"]
[1,"        p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"            color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"            geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"                3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"                round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"                size = 5, color = \"blue\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"R^2: \", round(r2, \n"]
[1,"                3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"                round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, \n"]
[1,"                size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"            x = -Inf, y = Inf, label = paste0(\"Corr: \", round(pred.cor, \n"]
[1,"                3)), hjust = -0.1, vjust = 8, size = 5, color = \"green\") + \n"]
[1,"            annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", \n"]
[1,"                round(adj.pred.cor, 3)), hjust = -0.1, vjust = 9.5, \n"]
[1,"                size = 5, color = \"green\") + theme_bw(base_size = 15)\n"]
[1,"        basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"            harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"        dir.create(basel.pred.folder, recursive = T)\n"]
[1,"        pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", \n"]
[1,"            test.fold.i, \".pdf\"))\n"]
[1,"        print(p)\n"]
[1,"        dev.off()\n"]
[1,"        res.table[[counter]] = data.frame(model = model.type, \n"]
[1,"            test.fold = test.fold.i, rmse = pred.rmse, adj.rmse = adj.pred.rmse, \n"]
[1,"            r2 = r2, adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"        counter = counter + 1\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#368: next\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#442: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m13\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, j, error, rmse, cor, auc, num_leaves, max_depth, learning_ra...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#443: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#444: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#409: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, j, error, rmse, cor, auc, gamma, cost\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#410: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#411: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#375: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m8\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, a, error, rmse, cor, auc, alpha, lambda\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#376: sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#377: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#256: library(e1071)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#257: library(caret)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#263: train <- x.variables %>% as.matrix()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#269: y_train <- y.response\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#274: train.comb = cbind(train, age = y_train)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#307: if (capped.i == \"remove.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"        90)\n"]
[1,"} else if (capped.i == \"include.capped\") {\n"]
[1,"    argo.full.data.wide.alt = argo.full.data.wide\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#308: argo.full.data.wide.alt = argo.full.data.wide %>% filter(Age2 != \n"]
[1,"    90)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#312: sample.annotate = argo.full.data.wide.alt %>% select(subject.id, \n"]
[1,"    Age2) %>% rename(SampleName = subject.id, age = Age2)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#314: otherdata.wide = argo.full.data.wide.alt\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#315: colnames(otherdata.wide) <- gsub(\"[^[:alnum:]]\", \"\", colnames(otherdata.wide))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#316: otherdata.wide = otherdata.wide %>% select(-c(Sex, Age2)) %>% \n"]
[1,"    column_to_rownames(\"subjectid\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#319: otherdata.wide\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#324: library(pROC)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#327: train.comb.reformat = train.comb\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#328: colnames(train.comb.reformat) <- gsub(\"[^[:alnum:]]\", \"\", colnames(train.comb.reformat))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#330: protein.list = intersect(colnames(otherdata.wide), grep(\"age\", \n"]
[1,"    colnames(train.comb.reformat), invert = T, value = T))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#332: otherdata.wide = otherdata.wide %>% select(protein.list)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#333: train.comb.reformat = train.comb.reformat[, c(protein.list, \"age\")]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#338: model.list = c(\"lm\", \"lightGBM\", \"SVM\", \"elastic.net\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#339: for (model.type in model.list) {\n"]
[1,"    print(model.type)\n"]
[1,"    if (model.type == \"lm\") {\n"]
[1,"        if (test.fold.i > 5) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"            svm1$protein[1:20]\n"]
[1,"            lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"                collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"                data.frame())\n"]
[1,"            predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"                train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                  \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"                \"age\"]))\n"]
[1,"            model.training\n"]
[1,"            pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"            pred.res\n"]
[1,"            new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"                pred.res + coefficients(model.training)[1]\n"]
[1,"            new.pred\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            next\n"]
[1,"        }\n"]
[1,"    }\n"]
[1,"    if (model.type == \"elastic.net\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"            lambda = sorted.res$lambda[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"        pred.res = pred.res[, 1]\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"SVM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"            gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"            train.comb.reformat), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"            )\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    if (model.type == \"lightGBM\") {\n"]
[1,"        if (test.fold.i < 6) {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/both.model.\", test.fold.i, \n"]
[1,"                \".csv\"))\n"]
[1,"            sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        else {\n"]
[1,"            svm1 = read_csv(paste0(\"figures/model.iter.12/\", \n"]
[1,"                model.type, \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"            sorted.res = svm1\n"]
[1,"            j = 1\n"]
[1,"        }\n"]
[1,"        train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"            \"age\"])\n"]
[1,"        vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"        light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"            metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"            num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"            early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"            verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"            valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"        yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"            !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"            Age = train.comb.reformat[, \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(light_gbn_tuned, otherdata.wide %>% \n"]
[1,"            as.matrix())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"        left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"            distinct(), by = \"SampleName\")\n"]
[1,"    others.age %>% head()\n"]
[1,"    others.age$age\n"]
[1,"    pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"    adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"    model <- lm(pred.res ~ others.age$age)\n"]
[1,"    model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"    r2 = summary(model)$r.squared\n"]
[1,"    adj.r2 = summary(model.new)$r.squared\n"]
[1,"    pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"    adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"    plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"        type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"        type = \"adjusted\"))\n"]
[1,"    p = plot.data %>% ggplot(aes(chronological.age, pred.age, \n"]
[1,"        color = type)) + geom_point() + geom_smooth(method = \"lm\") + \n"]
[1,"        geom_abline(slope = 1, intercept = 0) + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"RMSE: \", round(pred.rmse, \n"]
[1,"            3)), hjust = -0.1, vjust = 2, size = 5, color = \"blue\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"            round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, \n"]
[1,"            size = 5, color = \"blue\") + annotate(\"text\", x = -Inf, \n"]
[1,"        y = Inf, label = paste0(\"R^2: \", round(r2, 3)), hjust = -0.1, \n"]
[1,"        vjust = 5, size = 5, color = \"orange\") + annotate(\"text\", \n"]
[1,"        x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", round(adj.r2, \n"]
[1,"            3)), hjust = -0.1, vjust = 6.5, size = 5, color = \"orange\") + \n"]
[1,"        annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Corr: \", \n"]
[1,"            round(pred.cor, 3)), hjust = -0.1, vjust = 8, size = 5, \n"]
[1,"            color = \"green\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"        label = paste0(\"Adj. Corr: \", round(adj.pred.cor, 3)), \n"]
[1,"        hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"        theme_bw(base_size = 15)\n"]
[1,"    basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"        harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"    dir.create(basel.pred.folder, recursive = T)\n"]
[1,"    pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"        \".pdf\"))\n"]
[1,"    print(p)\n"]
[1,"    dev.off()\n"]
[1,"    res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"        rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, \n"]
[1,"        adj.r2 = adj.r2, corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"    counter = counter + 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lm\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#343: if (test.fold.i > 5) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"    svm1$protein[1:20]\n"]
[1,"    lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"        collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"    predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"        \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"} else {\n"]
[1,"    next\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#344: svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m322\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m7\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): protein\n"]
[1,"\u001B[32mdbl\u001B[39m (6): ...1, Estimate, Std..Error, t.value, Pr...t.., adj.pval\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#345: svm1$protein[1:20]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#346: lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"    collapse = \"+\"))), data = train.comb.reformat %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#354: predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#357: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"    \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#360: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#361: pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#362: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#365: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#366: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"lightGBM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#441: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#446: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m288\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m14\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m  (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (13): ...1, num_leaves, max_depth, learning_rate, feature_fraction, lamb...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#447: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#448: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#451: train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#453: vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"    \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#454: light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"    metric = \"rmse\", max_depth = sorted.res$max_depth[j], num_leaves = sorted.res$num_leaves[j], \n"]
[1,"    num_iterations = sorted.res$num_iterations[j], early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"    verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"    valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#469: yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"    !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#471: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"    Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#474: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#475: pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#481: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#482: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#483: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning messages:\n1: Unknown or uninitialised column: `num_iterations`. \n2: Unknown or uninitialised column: `early_stopping_rounds`. \nWarning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"SVM\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#408: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#413: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m2800\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, gamma, cost, mean.rmse, mean.rank, rmse.rank, ranks.rank, mea...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#414: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#415: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#417: m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"    gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#423: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"    train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#426: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#429: pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"    )\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#434: pred.res\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#435: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#436: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#340: print(model.type)\n"]
[1,"[1] \"elastic.net\"\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#342: if (model.type == \"lm\") {\n"]
[1,"    if (test.fold.i > 5) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/lm.res/lm.feature.importance.csv\"))\n"]
[1,"        svm1$protein[1:20]\n"]
[1,"        lm.res = lm(as.formula(paste0(\"age ~ \", paste(svm1$protein[1:20], \n"]
[1,"            collapse = \"+\"))), data = train.comb.reformat %>% \n"]
[1,"            data.frame())\n"]
[1,"        predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(lm.res, \n"]
[1,"            train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"                \"age\"] %>% data.frame()), Age = train.comb.reformat[, \n"]
[1,"            \"age\"]))\n"]
[1,"        model.training\n"]
[1,"        pred.res <- predict(lm.res, otherdata.wide %>% data.frame())\n"]
[1,"        pred.res\n"]
[1,"        new.pred = coefficients(model.training)[\"pred.age\"] * \n"]
[1,"            pred.res + coefficients(model.training)[1]\n"]
[1,"        new.pred\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        next\n"]
[1,"    }\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#373: if (model.type == \"elastic.net\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"        lambda = sorted.res$lambda[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res = pred.res[, 1]\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#374: if (test.fold.i < 6) {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"    sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"    j = 1\n"]
[1,"} else {\n"]
[1,"    svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"        \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"    sorted.res = svm1\n"]
[1,"    j = 1\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#379: svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"    \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"\u001B[1m\u001B[22mNew names:\n"]
[1,"\u001B[36m•\u001B[39m `` -> `...1`\n"]
[1,"\u001B[1mRows: \u001B[22m\u001B[34m1100\u001B[39m \u001B[1mColumns: \u001B[22m\u001B[34m9\u001B[39m\n"]
[1,"\u001B[36m──\u001B[39m \u001B[1mColumn specification\u001B[22m \u001B[36m────────────────────────────────────────────────────────\u001B[39m\n"]
[1,"\u001B[1mDelimiter:\u001B[22m \",\"\n"]
[1,"\u001B[31mchr\u001B[39m (1): list.rank\n"]
[1,"\u001B[32mdbl\u001B[39m (8): ...1, alpha, lambda, mean.rmse, mean.rank, rmse.rank, ranks.rank, m...\n"]
[1,"\u001B[36mℹ\u001B[39m Use `spec()` to retrieve the full column specification for this data.\n"]
[1,"\u001B[36mℹ\u001B[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#380: sorted.res = svm1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#381: j = 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#383: glm.manual = glmnet(x = train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"    \"age\"], y = train.comb.reformat[, \"age\"], alpha = sorted.res$alpha[j], \n"]
[1,"    lambda = sorted.res$lambda[j])\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#389: model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(glm.manual, \n"]
[1,"    train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"        \"age\"])[, 1], Age = train.comb.reformat[, \"age\"]))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#392: model.training\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#393: pred.res <- predict(glm.manual, otherdata.wide %>% as.matrix())\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#399: pred.res = pred.res[, 1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#400: new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"    coefficients(model.training)[1]\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#401: new.pred\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#407: if (model.type == \"SVM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    m_svm_untuned <- svm(formula = age ~ ., data = train.comb.reformat, \n"]
[1,"        gamma = sorted.res$gamma[j], cost = sorted.res$cost[j])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = predict(m_svm_untuned, \n"]
[1,"        train.comb.reformat), Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(m_svm_untuned, newdata = otherdata.wide, \n"]
[1,"        )\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#440: if (model.type == \"lightGBM\") {\n"]
[1,"    if (test.fold.i < 6) {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/both.model.\", test.fold.i, \".csv\"))\n"]
[1,"        sorted.res = svm1 %>% arrange(rmse)\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    else {\n"]
[1,"        svm1 = read_csv(paste0(\"figures/model.iter.12/\", model.type, \n"]
[1,"            \"/both/aggregated.performance.rank.csv\"))\n"]
[1,"        sorted.res = svm1\n"]
[1,"        j = 1\n"]
[1,"    }\n"]
[1,"    train_lgb <- lightgbm::lgb.Dataset(train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"], label = train.comb.reformat[, \n"]
[1,"        \"age\"])\n"]
[1,"    vali_lgb <- lightgbm::lgb.Dataset.create.valid(train_lgb, \n"]
[1,"        train.comb.reformat[, !colnames(train.comb.reformat) %in% \n"]
[1,"            \"age\"], label = train.comb.reformat[, \"age\"])\n"]
[1,"    light_gbn_tuned <- lightgbm::lgb.train(params = list(objective = \"regression\", \n"]
[1,"        metric = \"rmse\", max_depth = sorted.res$max_depth[j], \n"]
[1,"        num_leaves = sorted.res$num_leaves[j], num_iterations = sorted.res$num_iterations[j], \n"]
[1,"        early_stopping_rounds = sorted.res$early_stopping_rounds[j], \n"]
[1,"        verbose = -1, learning_rate = sorted.res$learning_rate[j]), \n"]
[1,"        valids = list(vali = vali_lgb), data = train_lgb)\n"]
[1,"    yhat_fit_tuned <- predict(light_gbn_tuned, train.comb.reformat[, \n"]
[1,"        !colnames(train.comb.reformat) %in% \"age\"])\n"]
[1,"    model.training <- lm(Age ~ pred.age, data = data.frame(pred.age = yhat_fit_tuned, \n"]
[1,"        Age = train.comb.reformat[, \"age\"]))\n"]
[1,"    model.training\n"]
[1,"    pred.res <- predict(light_gbn_tuned, otherdata.wide %>% as.matrix())\n"]
[1,"    pred.res\n"]
[1,"    new.pred = coefficients(model.training)[\"pred.age\"] * pred.res + \n"]
[1,"        coefficients(model.training)[1]\n"]
[1,"    new.pred\n"]
[1,"}\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#488: others.age = data.frame(SampleName = rownames(otherdata.wide)) %>% \n"]
[1,"    left_join(sample.annotate %>% select(SampleName, age) %>% \n"]
[1,"        distinct(), by = \"SampleName\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#490: others.age %>% head()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#491: others.age$age\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#494: pred.rmse = RMSE(pred.res, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#495: adj.pred.rmse = RMSE(new.pred, others.age$age, na.rm = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#496: model <- lm(pred.res ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#497: model.new <- lm(new.pred ~ others.age$age)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#498: r2 = summary(model)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#499: adj.r2 = summary(model.new)$r.squared\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#500: pred.cor = cor(pred.res, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#501: adj.pred.cor = cor(new.pred, others.age$age, use = \"c\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#506: plot.data = rbind(data.frame(pred.age = pred.res, chronological.age = others.age$age, \n"]
[1,"    type = \"org\"), data.frame(pred.age = new.pred, chronological.age = others.age$age, \n"]
[1,"    type = \"adjusted\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#509: p = plot.data %>% ggplot(aes(chronological.age, pred.age, color = type)) + \n"]
[1,"    geom_point() + geom_smooth(method = \"lm\") + geom_abline(slope = 1, \n"]
[1,"    intercept = 0) + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"RMSE: \", \n"]
[1,"    round(pred.rmse, 3)), hjust = -0.1, vjust = 2, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. RMSE: \", \n"]
[1,"    round(adj.pred.rmse, 3)), hjust = -0.1, vjust = 3.5, size = 5, \n"]
[1,"    color = \"blue\") + annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"R^2: \", \n"]
[1,"    round(r2, 3)), hjust = -0.1, vjust = 5, size = 5, color = \"orange\") + \n"]
[1,"    annotate(\"text\", x = -Inf, y = Inf, label = paste0(\"Adj. R^2: \", \n"]
[1,"        round(adj.r2, 3)), hjust = -0.1, vjust = 6.5, size = 5, \n"]
[1,"        color = \"orange\") + annotate(\"text\", x = -Inf, y = Inf, \n"]
[1,"    label = paste0(\"Corr: \", round(pred.cor, 3)), hjust = -0.1, \n"]
[1,"    vjust = 8, size = 5, color = \"green\") + annotate(\"text\", \n"]
[1,"    x = -Inf, y = Inf, label = paste0(\"Adj. Corr: \", round(adj.pred.cor, \n"]
[1,"        3)), hjust = -0.1, vjust = 9.5, size = 5, color = \"green\") + \n"]
[1,"    theme_bw(base_size = 15)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#530: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#531: dir.create(basel.pred.folder, recursive = T)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#532: pdf(paste0(basel.pred.folder, \"rmse.\", model.type, \".\", test.fold.i, \n"]
[1,"    \".pdf\"))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#533: print(p)\n"]
[2,"Warning message:\nIn dir.create(basel.pred.folder, recursive = T) :\n  'figures/prediction/methuselah.argo/not.bridged/remove.capped' already exists\n"]
[1,"\u001B[1m\u001B[22m`geom_smooth()` using formula = 'y ~ x'\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#534: dev.off()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#535: res.table[[counter]] = data.frame(model = model.type, test.fold = test.fold.i, \n"]
[1,"    rmse = pred.rmse, adj.rmse = adj.pred.rmse, r2 = r2, adj.r2 = adj.r2, \n"]
[1,"    corr = pred.cor, adj.corr = adj.pred.cor)\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#540: counter = counter + 1\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#544: res.table.final = res.table %>% data.table::rbindlist()\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#545: res.table.final = res.table.final %>% mutate(test.fold = ifelse(test.fold == \n"]
[1,"    6, \"best.param\", test.fold))\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#546: basel.pred.folder = paste0(\"figures/prediction/methuselah.argo/\", \n"]
[1,"    harmonized.i, \"/\", capped.i, \"/\")\n"]
[1,"debug at /Users/hhuang/Desktop/aging prediction/aging prediction scaled/scripts/05.01.methuselah.argo.predict.whole.training.R#547: write.csv(res.table.final, paste0(basel.pred.folder, \"res.table.csv\"))\n"]
